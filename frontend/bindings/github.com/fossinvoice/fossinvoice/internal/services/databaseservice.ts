// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * DatabaseService provides simple CRUD methods operating on a SQLite DB file path.
 * Each method opens the database at the provided path, performs the operation, and closes it.
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../models/models.js";

/**
 * CreateClient inserts a new client linked to the provided company and returns it with the assigned ID.
 */
export function CreateClient(databasePath: string, companyID: number, client: models$0.Client): $CancellablePromise<models$0.Client | null> {
    return $Call.ByID(3776761531, databasePath, companyID, client).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * CreateCompany inserts a new company (data only, no relations) and returns it with the assigned ID.
 */
export function CreateCompany(databasePath: string, company: models$0.Company): $CancellablePromise<models$0.Company | null> {
    return $Call.ByID(3225992131, databasePath, company).then(($result: any) => {
        return $$createType3($result);
    });
}

/**
 * CreateInvoice inserts a new invoice (and its items) ensuring the client belongs to the company.
 */
export function CreateInvoice(databasePath: string, invoice: models$0.Invoice): $CancellablePromise<models$0.Invoice | null> {
    return $Call.ByID(103672631, databasePath, invoice).then(($result: any) => {
        return $$createType5($result);
    });
}

/**
 * DeleteClient deletes a client and its related data (invoices and invoice items) in a transaction.
 */
export function DeleteClient(databasePath: string, clientID: number): $CancellablePromise<void> {
    return $Call.ByID(1547736180, databasePath, clientID);
}

/**
 * DeleteCompany deletes a company and its related data (clients, invoices, invoice items) in a transaction.
 */
export function DeleteCompany(databasePath: string, companyID: number): $CancellablePromise<void> {
    return $Call.ByID(4245201082, databasePath, companyID);
}

/**
 * DeleteInvoice deletes an invoice and its items in a transaction.
 */
export function DeleteInvoice(databasePath: string, invoiceID: number): $CancellablePromise<void> {
    return $Call.ByID(2602720426, databasePath, invoiceID);
}

/**
 * GetClient returns a single client by ID.
 */
export function GetClient(databasePath: string, clientID: number): $CancellablePromise<models$0.Client | null> {
    return $Call.ByID(2877816371, databasePath, clientID).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * GetCompanyDefaults returns the defaults for a company or creates an empty record if missing.
 */
export function GetCompanyDefaults(databasePath: string, companyID: number): $CancellablePromise<models$0.CompanyDefaults | null> {
    return $Call.ByID(3179294701, databasePath, companyID).then(($result: any) => {
        return $$createType7($result);
    });
}

/**
 * GetInvoice returns a single invoice with its items preloaded.
 */
export function GetInvoice(databasePath: string, invoiceID: number): $CancellablePromise<models$0.Invoice | null> {
    return $Call.ByID(1834309679, databasePath, invoiceID).then(($result: any) => {
        return $$createType5($result);
    });
}

/**
 * GetMaxInvoiceNumber returns the largest numeric invoice number for a company.
 * It considers only invoice numbers that are purely numeric (e.g., "1", "42").
 * If no numeric invoice numbers exist, it returns 0.
 */
export function GetMaxInvoiceNumber(databasePath: string, companyID: number): $CancellablePromise<number> {
    return $Call.ByID(568800844, databasePath, companyID);
}

export function Init(databasePath: string): $CancellablePromise<void> {
    return $Call.ByID(2626867082, databasePath);
}

/**
 * ListClientInvoices returns invoices for a company and specific client with optional fiscal year filter.
 */
export function ListClientInvoices(databasePath: string, companyID: number, clientID: number, fiscalYear: number): $CancellablePromise<models$0.Invoice[]> {
    return $Call.ByID(947145799, databasePath, companyID, clientID, fiscalYear).then(($result: any) => {
        return $$createType8($result);
    });
}

/**
 * ListClients returns all clients for a given company.
 */
export function ListClients(databasePath: string, companyID: number): $CancellablePromise<models$0.Client[]> {
    return $Call.ByID(550700564, databasePath, companyID).then(($result: any) => {
        return $$createType9($result);
    });
}

/**
 * ListCompanies returns all companies.
 */
export function ListCompanies(databasePath: string): $CancellablePromise<models$0.Company[]> {
    return $Call.ByID(1498688831, databasePath).then(($result: any) => {
        return $$createType10($result);
    });
}

/**
 * ListFiscalYears returns the distinct list of fiscal years present in invoices for a company (descending).
 */
export function ListFiscalYears(databasePath: string, companyID: number): $CancellablePromise<number[]> {
    return $Call.ByID(3319587284, databasePath, companyID).then(($result: any) => {
        return $$createType11($result);
    });
}

/**
 * ListInvoices returns invoices for a company with optional filters.
 * If fiscalYear > 0, filters by FiscalYear. If clientID > 0, filters by ClientID.
 */
export function ListInvoices(databasePath: string, companyID: number, fiscalYear: number, clientID: number): $CancellablePromise<models$0.Invoice[]> {
    return $Call.ByID(3585217392, databasePath, companyID, fiscalYear, clientID).then(($result: any) => {
        return $$createType8($result);
    });
}

/**
 * UpdateClient updates client data by primary key (ID must be set). Returns the updated record.
 */
export function UpdateClient(databasePath: string, client: models$0.Client): $CancellablePromise<models$0.Client | null> {
    return $Call.ByID(2262375314, databasePath, client).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * UpdateCompany updates company data by primary key (ID must be set). Returns the updated record.
 */
export function UpdateCompany(databasePath: string, company: models$0.Company): $CancellablePromise<models$0.Company | null> {
    return $Call.ByID(483936288, databasePath, company).then(($result: any) => {
        return $$createType3($result);
    });
}

/**
 * UpdateCompanyDefaults upserts defaults for a company.
 */
export function UpdateCompanyDefaults(databasePath: string, def: models$0.CompanyDefaults): $CancellablePromise<models$0.CompanyDefaults | null> {
    return $Call.ByID(1989614922, databasePath, def).then(($result: any) => {
        return $$createType7($result);
    });
}

/**
 * UpdateInvoice updates invoice header fields and replaces items with provided ones (idempotent) in a transaction.
 */
export function UpdateInvoice(databasePath: string, invoice: models$0.Invoice): $CancellablePromise<models$0.Invoice | null> {
    return $Call.ByID(4262715900, databasePath, invoice).then(($result: any) => {
        return $$createType5($result);
    });
}

// Private type creation functions
const $$createType0 = models$0.Client.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = models$0.Company.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
const $$createType4 = models$0.Invoice.createFrom;
const $$createType5 = $Create.Nullable($$createType4);
const $$createType6 = models$0.CompanyDefaults.createFrom;
const $$createType7 = $Create.Nullable($$createType6);
const $$createType8 = $Create.Array($$createType4);
const $$createType9 = $Create.Array($$createType0);
const $$createType10 = $Create.Array($$createType2);
const $$createType11 = $Create.Array($Create.Any);
