// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as gorm$0 from "../../../../../gorm.io/gorm/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../../../time/models.js";

/**
 * Client represents the buyer.
 */
export class Client {
    "ID": number;
    "CreatedAt": time$0.Time;
    "UpdatedAt": time$0.Time;
    "DeletedAt": gorm$0.DeletedAt;

    /**
     * FK to Company
     */
    "CompanyID": number;
    "Name": string;
    "Address": string;
    "TaxID": string;

    /**
     * Inline contact fields for simplicity
     */
    "Contact": ContactInfo;
    "Invoices": Invoice[];

    /** Creates a new Client instance. */
    constructor($$source: Partial<Client> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            this["DeletedAt"] = null;
        }
        if (!("CompanyID" in $$source)) {
            this["CompanyID"] = 0;
        }
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Address" in $$source)) {
            this["Address"] = "";
        }
        if (!("TaxID" in $$source)) {
            this["TaxID"] = "";
        }
        if (!("Contact" in $$source)) {
            this["Contact"] = (new ContactInfo());
        }
        if (!("Invoices" in $$source)) {
            this["Invoices"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Client instance from a string or object.
     */
    static createFrom($$source: any = {}): Client {
        const $$createField8_0 = $$createType0;
        const $$createField9_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Contact" in $$parsedSource) {
            $$parsedSource["Contact"] = $$createField8_0($$parsedSource["Contact"]);
        }
        if ("Invoices" in $$parsedSource) {
            $$parsedSource["Invoices"] = $$createField9_0($$parsedSource["Invoices"]);
        }
        return new Client($$parsedSource as Partial<Client>);
    }
}

/**
 * Company represents the seller.
 */
export class Company {
    "ID": number;
    "CreatedAt": time$0.Time;
    "UpdatedAt": time$0.Time;
    "DeletedAt": gorm$0.DeletedAt;
    "Name": string;
    "Address": string;
    "TaxID": string;
    "IconB64": string;

    /**
     * Inline contact fields into the same table for simplicity
     */
    "Contact": ContactInfo;

    /**
     * Relations
     */
    "Clients": Client[];
    "Invoices": Invoice[];

    /** Creates a new Company instance. */
    constructor($$source: Partial<Company> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            this["DeletedAt"] = null;
        }
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Address" in $$source)) {
            this["Address"] = "";
        }
        if (!("TaxID" in $$source)) {
            this["TaxID"] = "";
        }
        if (!("IconB64" in $$source)) {
            this["IconB64"] = "";
        }
        if (!("Contact" in $$source)) {
            this["Contact"] = (new ContactInfo());
        }
        if (!("Clients" in $$source)) {
            this["Clients"] = [];
        }
        if (!("Invoices" in $$source)) {
            this["Invoices"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Company instance from a string or object.
     */
    static createFrom($$source: any = {}): Company {
        const $$createField8_0 = $$createType0;
        const $$createField9_0 = $$createType4;
        const $$createField10_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Contact" in $$parsedSource) {
            $$parsedSource["Contact"] = $$createField8_0($$parsedSource["Contact"]);
        }
        if ("Clients" in $$parsedSource) {
            $$parsedSource["Clients"] = $$createField9_0($$parsedSource["Clients"]);
        }
        if ("Invoices" in $$parsedSource) {
            $$parsedSource["Invoices"] = $$createField10_0($$parsedSource["Invoices"]);
        }
        return new Company($$parsedSource as Partial<Company>);
    }
}

/**
 * CompanyDefaults stores default configuration for a company (one-to-one).
 */
export class CompanyDefaults {
    "ID": number;
    "CreatedAt": time$0.Time;
    "UpdatedAt": time$0.Time;
    "DeletedAt": gorm$0.DeletedAt;
    "CompanyID": number;
    "Company": Company;

    /**
     * ISO 4217 code e.g. "USD", "EUR"
     */
    "DefaultCurrency": string;

    /**
     * percentage, e.g., 21.0
     */
    "DefaultTaxRate": number;
    "DefaultFooterText": string;

    /** Creates a new CompanyDefaults instance. */
    constructor($$source: Partial<CompanyDefaults> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            this["DeletedAt"] = null;
        }
        if (!("CompanyID" in $$source)) {
            this["CompanyID"] = 0;
        }
        if (!("Company" in $$source)) {
            this["Company"] = (new Company());
        }
        if (!("DefaultCurrency" in $$source)) {
            this["DefaultCurrency"] = "";
        }
        if (!("DefaultTaxRate" in $$source)) {
            this["DefaultTaxRate"] = 0;
        }
        if (!("DefaultFooterText" in $$source)) {
            this["DefaultFooterText"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CompanyDefaults instance from a string or object.
     */
    static createFrom($$source: any = {}): CompanyDefaults {
        const $$createField5_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Company" in $$parsedSource) {
            $$parsedSource["Company"] = $$createField5_0($$parsedSource["Company"]);
        }
        return new CompanyDefaults($$parsedSource as Partial<CompanyDefaults>);
    }
}

/**
 * ContactInfo is embedded into Company and Client tables.
 */
export class ContactInfo {
    "Email": string | null;
    "Phone": string | null;
    "Website": string | null;

    /** Creates a new ContactInfo instance. */
    constructor($$source: Partial<ContactInfo> = {}) {
        if (!("Email" in $$source)) {
            this["Email"] = null;
        }
        if (!("Phone" in $$source)) {
            this["Phone"] = null;
        }
        if (!("Website" in $$source)) {
            this["Website"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ContactInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): ContactInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ContactInfo($$parsedSource as Partial<ContactInfo>);
    }
}

export class Invoice {
    "ID": number;
    "CreatedAt": time$0.Time;
    "UpdatedAt": time$0.Time;
    "DeletedAt": gorm$0.DeletedAt;

    /**
     * Ownership / FKs
     */
    "CompanyID": number;
    "ClientID": number;
    "Company": Company;
    "Client": Client;

    /**
     * Identification & dates
     * human-readable invoice number (numeric)
     */
    "Number": number;

    /**
     * ISO date (YYYY-MM-DD)
     */
    "IssueDate": string;

    /**
     * ISO date (YYYY-MM-DD)
     */
    "DueDate": string;

    /**
     * Fiscal categorization
     * e.g., 2025
     */
    "FiscalYear": number;

    /**
     * Currency & amounts
     * ISO 4217 code, e.g. "USD", "EUR"
     */
    "Currency": string;

    /**
     * sum of item totals before tax and discounts
     */
    "Subtotal": number;

    /**
     * percentage, e.g. 21.0 for 21%
     */
    "TaxRate": number;

    /**
     * computed tax amount over the taxable base
     */
    "TaxAmount": number;

    /**
     * optional absolute discount applied at invoice level
     */
    "DiscountAmount": number;

    /**
     * grand total after tax and discounts
     */
    "Total": number;

    /**
     * Status & presentation
     * e.g. "Draft", "Sent", "Paid", "Overdue"
     */
    "Status": string;

    /**
     * optional footer/notes to show on the PDF
     */
    "Notes": string | null;

    /**
     * Footer text printed at the bottom of the invoice PDF
     */
    "FooterText": string;

    /**
     * Lines
     */
    "Items": InvoiceItem[];

    /** Creates a new Invoice instance. */
    constructor($$source: Partial<Invoice> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            this["DeletedAt"] = null;
        }
        if (!("CompanyID" in $$source)) {
            this["CompanyID"] = 0;
        }
        if (!("ClientID" in $$source)) {
            this["ClientID"] = 0;
        }
        if (!("Company" in $$source)) {
            this["Company"] = (new Company());
        }
        if (!("Client" in $$source)) {
            this["Client"] = (new Client());
        }
        if (!("Number" in $$source)) {
            this["Number"] = 0;
        }
        if (!("IssueDate" in $$source)) {
            this["IssueDate"] = "";
        }
        if (!("DueDate" in $$source)) {
            this["DueDate"] = "";
        }
        if (!("FiscalYear" in $$source)) {
            this["FiscalYear"] = 0;
        }
        if (!("Currency" in $$source)) {
            this["Currency"] = "";
        }
        if (!("Subtotal" in $$source)) {
            this["Subtotal"] = 0;
        }
        if (!("TaxRate" in $$source)) {
            this["TaxRate"] = 0;
        }
        if (!("TaxAmount" in $$source)) {
            this["TaxAmount"] = 0;
        }
        if (!("DiscountAmount" in $$source)) {
            this["DiscountAmount"] = 0;
        }
        if (!("Total" in $$source)) {
            this["Total"] = 0;
        }
        if (!("Status" in $$source)) {
            this["Status"] = "";
        }
        if (!("Notes" in $$source)) {
            this["Notes"] = null;
        }
        if (!("FooterText" in $$source)) {
            this["FooterText"] = "";
        }
        if (!("Items" in $$source)) {
            this["Items"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Invoice instance from a string or object.
     */
    static createFrom($$source: any = {}): Invoice {
        const $$createField6_0 = $$createType5;
        const $$createField7_0 = $$createType3;
        const $$createField21_0 = $$createType7;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Company" in $$parsedSource) {
            $$parsedSource["Company"] = $$createField6_0($$parsedSource["Company"]);
        }
        if ("Client" in $$parsedSource) {
            $$parsedSource["Client"] = $$createField7_0($$parsedSource["Client"]);
        }
        if ("Items" in $$parsedSource) {
            $$parsedSource["Items"] = $$createField21_0($$parsedSource["Items"]);
        }
        return new Invoice($$parsedSource as Partial<Invoice>);
    }
}

export class InvoiceItem {
    "ID": number;
    "CreatedAt": time$0.Time;
    "UpdatedAt": time$0.Time;
    "DeletedAt": gorm$0.DeletedAt;
    "InvoiceID": number;
    "Description": string;

    /**
     * supports fractional quantities (e.g., hours)
     */
    "Quantity": number;
    "UnitPrice": number;

    /**
     * Quantity * UnitPrice
     */
    "Total": number;

    /** Creates a new InvoiceItem instance. */
    constructor($$source: Partial<InvoiceItem> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            this["DeletedAt"] = null;
        }
        if (!("InvoiceID" in $$source)) {
            this["InvoiceID"] = 0;
        }
        if (!("Description" in $$source)) {
            this["Description"] = "";
        }
        if (!("Quantity" in $$source)) {
            this["Quantity"] = 0;
        }
        if (!("UnitPrice" in $$source)) {
            this["UnitPrice"] = 0;
        }
        if (!("Total" in $$source)) {
            this["Total"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new InvoiceItem instance from a string or object.
     */
    static createFrom($$source: any = {}): InvoiceItem {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new InvoiceItem($$parsedSource as Partial<InvoiceItem>);
    }
}

// Private type creation functions
const $$createType0 = ContactInfo.createFrom;
const $$createType1 = Invoice.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = Client.createFrom;
const $$createType4 = $Create.Array($$createType3);
const $$createType5 = Company.createFrom;
const $$createType6 = InvoiceItem.createFrom;
const $$createType7 = $Create.Array($$createType6);
