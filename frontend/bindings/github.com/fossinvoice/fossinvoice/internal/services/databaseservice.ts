// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * DatabaseService provides simple CRUD methods operating on a SQLite DB file path.
 * Each method opens the database at the provided path, performs the operation, and closes it.
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../models/models.js";

/**
 * CreateCompany inserts a new company (data only, no relations) and returns it with the assigned ID.
 */
export function CreateCompany(databasePath: string, company: models$0.Company): $CancellablePromise<models$0.Company | null> {
    return $Call.ByID(3225992131, databasePath, company).then(($result: any) => {
        return $$createType1($result);
    });
}

/**
 * DeleteCompany deletes a company and its related data (clients, invoices, invoice items) in a transaction.
 */
export function DeleteCompany(databasePath: string, companyID: number): $CancellablePromise<void> {
    return $Call.ByID(4245201082, databasePath, companyID);
}

export function Init(databasePath: string): $CancellablePromise<void> {
    return $Call.ByID(2626867082, databasePath);
}

/**
 * ListCompanies returns all companies.
 */
export function ListCompanies(databasePath: string): $CancellablePromise<models$0.Company[]> {
    return $Call.ByID(1498688831, databasePath).then(($result: any) => {
        return $$createType2($result);
    });
}

/**
 * UpdateCompany updates company data by primary key (ID must be set). Returns the updated record.
 */
export function UpdateCompany(databasePath: string, company: models$0.Company): $CancellablePromise<models$0.Company | null> {
    return $Call.ByID(483936288, databasePath, company).then(($result: any) => {
        return $$createType1($result);
    });
}

// Private type creation functions
const $$createType0 = models$0.Company.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType0);
